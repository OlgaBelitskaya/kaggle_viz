# -*- coding: utf-8 -*-
"""charts-rjs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17kPMT0X_NKOzyGHifSXAnWsiYUxHcWX5

## Code Modules
"""

library(IRdisplay)
library(tidyverse)

"""## With Arrays & Functions"""

html_str<-"
<script src='https://code.highcharts.com/highcharts.js'></script>
<div id='chdiv01' style='height:500px; width:500px; margin:0 auto'></div>
<script>
var series=[]; var d=.001; var i; var n=3; 
function randi(min,max) {return Math.floor(Math.random()*(max-min+1))+min;};
function ar(k,a,b) {return Array(6400).fill(k).map((k,t)=>
    [k*(Math.cos(d*t)+Math.sin(a*d*t)/2-Math.cos(b*d*t)/6),
     k*(Math.sin(d*t)+Math.cos(a*d*t)/2-Math.sin(b*d*t)/6)]);};
function col(i) {var r=randi(i,255),g=randi(i,255),b=randi(i,255);
                 return 'rgb('+r+','+g+','+b+')';}; 
var a=randi(7,19),b=randi(18,64);
for (i=1; i<n+1; i++) {
    series.push({name:i,color:col(i),lineWidth:.5,data:ar(i,a,b)})};
Highcharts.chart('chdiv01',{
    chart:{type:'line',backgroundColor:'mintcream'},
    xAxis:{title:{text:'x'}},yAxis:{title:{text:'y'}},
    title:{text:'a,b = '+[a,b]},series:series,
    credits:{enabled:false},legend:{enabled:false}});
</script>"
html_str<-paste(as.character(html_str),collapse="\n")
write.table(html_str,file='ch01.html',
            quote=FALSE,col.names=FALSE,row.names=FALSE)
display_html("<div id='d1'><iframe src='ch01.html' 
             height='570' width='520'></iframe></div>")

"""## With CSV Strings, Objects, Arrays, & Data Tables"""

html_str<-"<script src='https://www.gstatic.com/charts/loader.js'>
</script></script><script src='https://d3js.org/d3.v5.js'></script>
<script type='text/javascript'>
google.charts.load('current',{'packages':['corechart']});
google.charts.setOnLoadCallback(drawChart);
const st=`x,y,z
1.418,-1.494,-2.541
1.259,-1.563,-2.426
1.236,-1.686,-2.711
1.409,-1.614,-2.865
1.225,-1.777,-2.939`;
const xyz=d3.csvParse(st,d3.autoType);
var x=[],y=[],z=[];
for (var i=0; i<5; i++){
  x.push(xyz[i]['x']); 
  y.push(xyz[i]['y']); 
  z.push(xyz[i]['z'])};
function drawChart() {
  var data=new google.visualization.DataTable();
  data.addColumn('number','id'); data.addColumn('number','v1');
  data.addColumn('number','v2'); data.addColumn('number','v3');
  for (var i=0; i<5; i++){
      data.addRow([i+1,x[i],y[i],z[i]]);};
  var options={'title':'Charts with DataTables',
               'width':500,'height':500};
  var doc=document.getElementById('chdiv02');
  var chart=new google.visualization.AreaChart(doc);
  chart.draw(data,options);}
</script><div id='chdiv02'></div>"
html_str<-paste(as.character(html_str),collapse="\n")
write.table(html_str,file='ch02.html',
            quote=FALSE,col.names=FALSE,row.names=FALSE)
display_html("<div id='d2'><iframe src='ch02.html' 
             height='570' width='520'></iframe></div>")

"""## With CSV Files"""

fp<-'https://olgabelitskaya.github.io/beethoven.csv'
coords<-data.frame(read.csv(fp,header=T,sep=','))
t(head(coords,7))

html_str<-"
<script src='https://d3js.org/d3.v4.min.js'>
</script><svg id='chsvg01' style='background-color:slategray;'></svg><script>
var url='https://olgabelitskaya.github.io/beethoven.csv';
d3.csv(url,function(data) {
var n=data.length,m=35,margin={top:m,right:m,bottom:m,left:m},
    width=500-margin.left-margin.right,
    height=750-margin.top-margin.bottom; 
var xScale=d3.scaleLinear().domain([-4,4]).range([0,width]); 
var yScale=d3.scaleLinear().domain([-6,6]).range([height,0]);
function make_x_gridlines() {return d3.axisBottom(xScale).ticks(11)}; 
function make_y_gridlines() {return d3.axisLeft(yScale).ticks(11)};
var pointColor=d3.scaleSequential().domain([0,n])
                 .interpolator(d3.interpolateCool);       
var svg=d3.select('#chsvg01').attr('width',width+margin.left+margin.right)
          .attr('height',height+margin.top+margin.bottom)
          .append('g').attr('transform',
                            'translate('+margin.left+','+margin.top+')');
svg.append('g').attr('class','xaxis1').call(d3.axisBottom(xScale).tickSize(.5))
               .attr('transform','translate(0,'+height+')'); 
svg.append('g').attr('class','yaxis1').call(d3.axisLeft(yScale).tickSize(.5));    
svg.append('g').attr('class','grid1').attr('transform','translate(0,'+height+')')
               .call(make_x_gridlines().tickSize(-height).tickFormat(''));
svg.append('g').attr('class','grid1').call(make_y_gridlines()
               .tickSize(-width).tickFormat(''));
svg.selectAll('.point').data(data).enter()
   .append('circle').attr('class','point')
   .attr('fill',function(d,i){return pointColor(i)}).attr('r',2)
   .attr('stroke','#ffffff').attr('stroke-width','.3')
   .attr('cx',function(d) {return xScale(d.y)})
   .attr('cy',function(d) {return yScale(d.z)}); });
</script>"
html_str<-paste(as.character(html_str),collapse="\n")
write.table(html_str,file='ch03.html',
            quote=FALSE,col.names=FALSE,row.names=FALSE)
display_html("<div id='d3'><iframe src='ch03.html' 
             height='530' width='520'></iframe></div>")

"""## In Progress"""

n<-24
colors<-c("#d35400","#2980b9","#2ecc71","#f1c40f","#2c3e50","#7f8c8d",
         "#000004","#3B0F70","#8C2981","#DE4968","#FE9F6D","#FCFDBF")
df<-data.frame(t=seq_len(n)) %>% 
  mutate(
    x=round((cos(4*t))*cos(t),2),
    y=round((1+cos(4*t))*sin(t),2),
    name=sample(fruit[str_length(fruit)<=6],size=n),
    color=rep(colors,length.out=n))
head(df)

fp<-'https://olgabelitskaya.github.io/huge_cities.tsv'
hcity<-data.frame(read.csv(fp,header=T,sep='\t'))
t(head(hcity,3))