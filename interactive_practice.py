# -*- coding: utf-8 -*-
"""interactive-practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z2I9fVq6JpPp_nduaiiRJBkhfSEMtwPY
"""

# Commented out IPython magic to ensure Python compatibility.
# %run ../input/python-recipes/dhtml.py
dhtml('Code Modules & Settings',c10,f2,fs7)

import os,numpy as np,pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from skimage import io
from IPython.display import display

dhtml('Interactive Data Presentation',c10,f2,fs7)

def pd_style(file_path,file,num):
    table_style=\
    [dict(selector='th',props=[('font-size','12pt')]),
     dict(selector='td',props=[('padding','0em 0em')]),
     dict(selector='th:hover',
          props=[('color','slategray'),
                 ('font-size','16pt')]),
     dict(selector='tr:hover td:hover',
          props=[('max-width','200px'),
                 ('color','darkslategray'),
                 ('font-color','slategray'),
                 ('font-size','16pt')])]
    df=pd.read_csv(file_path+file)
    display(df.head(num).T.style\
              .background_gradient('cool',axis=1)\
              .set_properties(
        **{'max-width':'80px','font-size':'1pt'})\
              .set_caption(dhtml(
        'Table Exploration',c10,f2,fs7))\
              .set_precision(2)\
              .set_table_styles(table_style))

file_path1='../input/image-examples-for-mixed-styles/'
file1='beethoven.csv'; num1=15
pd_style(file_path1,file1,num1)

dhtml('Interactive Image Presentation',c10,f2,fs7)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile plotly_images.py
# import os,numpy as np
# import plotly.graph_objects as go
# from plotly.subplots import make_subplots
# from skimage import io
# def plotly_images(file_path):
#     files=os.listdir(file_path)
#     numbers=np.random.randint(1,len(files),5)
#     fig=make_subplots(1,5); steps=[]
#     for step in np.arange(1,6,1):
#         img=io.imread(file_path+files[numbers[step-1]])
#         img=img[:,:,:3]
#         fig.add_trace(go.Image(z=img),1,step)
#         fig.data[step-1].visible=False
#     fig.data[0].visible=True
#     for i in range(len(fig.data)):
#         step=dict(method='update',
#                   args=[{'visible':[False]*len(fig.data)}])
#         step['args'][0]['visible'][i]=True
#         steps.append(step)
#     sliders=[dict(active=0,pad={'t':5},steps=steps)]
#     fig.update_layout(
#         width=700,height=350,sliders=sliders,
#         template='plotly_dark',
#         title_text='Image Examples',
#         title_font=dict(size=12))
#     fig.update_xaxes(showticklabels=False)\
#        .update_yaxes(showticklabels=False)
#     return fig

# Commented out IPython magic to ensure Python compatibility.
# %run plotly_images.py
file_path2='../input/flower-color-images/flowers/flowers/'
fig=plotly_images(file_path2)
fig.show()

dhtml('Interactive Charts',c10,f2,fs7)

file='../input/html-recipes/glinechart.html'
with open(file,'r') as f:
    html_str=f.read()#.replace('\n','') 
    f.close()
display(HTML(html_str))

dhtml('External Interactive Code Execution',c10,f2,fs7)

html_str="""<html><head><meta charset='utf-8'>"""+\
"""<meta name='viewport' content='width=device-width-3'>"""+\
"""<script src='https://sagecell.sagemath.org/static/embedded_sagecell.js'></script>"""+\
"""<script>$(function(){ sagecell.makeSagecell({"""+\
"""inputLocation:'#cell1',template:sagecell.templates.minimal,"""+\
"""evalButtonText:'run'}); });</script></head><body>"""+\
"""<style>h3 {color:#aa33ff; text-shadow:3px 3px 3px slategray;} """+\
"""pre {width:99%; padding-left:3px; border:2px double slategray;} """+\
""".sagecell_output {width:99%; border:2px double slategray; padding-right:1px;} """+\
""".sagecell_interactControlLabel:hover """+\
"""{padding-left:3px; color:#aa33ff; font-size:120%;} """+\
""".sagecell_interactOutput {padding-left:3px;}</style>"""+\
"""<body><h3>$$\large{\mathbb{Interactive \; 3D \; Plotting}}$$</h3>"""+\
"""<p>Click the $\large{\mathbb{run}}$ button to display an example.</p>"""+\
"""<pre><code>@interact"""+\
"""\ndef _(gnum=[3,..,6],lnum=[2,..,5]):"""+\
"""\n    LG=Graphics(); g=graphs.CubeGraph(gnum)"""+\
"""\n    vg=g.get_pos(); eg=g.edges()"""+\
"""\n    nv=len(vg); ne=len(eg); k=randint(10,50)/100"""+\
"""\n    x0=mean([list(vg.values())[i][0] for i in range(nv)])"""+\
"""\n    y0=mean([list(vg.values())[i][1] for i in range(nv)])"""+\
"""\n    coord=[[list(vg[eg[i][0]]),list(vg[eg[i][1]])] """+\
"""\n            for i in range(ne)]"""+\
"""\n    lg=[[[x-x0,y-y0] for [x,y] in coord[i]] """+\
"""\n        for i in range(ne)]"""+\
"""\n    zlg=[[[(1+k*j)*x,j,(1+k*j)*y] """+\
"""\n          for [x,y] in lg[i]] """+\
"""\n         for j in range(lnum) for i in range(ne)]"""+\
"""\n    for i in range(lnum*ne):"""+\
"""\n        LG+=line3d(zlg[i],"""+\
"""\n                   color=(floor(i/ne)/(lnum-1),"""+\
"""\n                          random(),random()))"""+\
"""\n    LG.show(frame=False,aspect_ratio=1) \n"""+\
"""</code></pre><br/>"""+\
"""<div id='cell1'><script type='text/x-sage'>"""+\
"""@interact"""+\
"""\ndef _(gnum=[3,..,6],lnum=[2,..,5]):"""+\
"""\n    LG=Graphics(); g=graphs.CubeGraph(gnum)"""+\
"""\n    vg=g.get_pos(); eg=g.edges()"""+\
"""\n    nv=len(vg); ne=len(eg); k=randint(10,50)/100"""+\
"""\n    x0=mean([list(vg.values())[i][0] for i in range(nv)])"""+\
"""\n    y0=mean([list(vg.values())[i][1] for i in range(nv)])"""+\
"""\n    coord=[[list(vg[eg[i][0]]),list(vg[eg[i][1]])] """+\
"""\n           for i in range(ne)]"""+\
"""\n    lg=[[[x-x0,y-y0] for [x,y] in coord[i]] """+\
"""\n        for i in range(ne)]"""+\
"""\n    zlg=[[[(1+k*j)*x,j,(1+k*j)*y] """+\
"""\n          for [x,y] in lg[i]] """+\
"""\n         for j in range(lnum) for i in range(ne)]"""+\
"""\n    for i in range(lnum*ne):"""+\
"""\n        LG+=line3d(zlg[i],"""+\
"""\n                   color=(floor(i/ne)/(lnum-1),"""+\
"""\n                          random(),random()))"""+\
"""\n    LG.show(frame=False,aspect_ratio=1)"""+\
"""</script></div></body></html>"""
display(HTML(html_str))

dhtml('External Interactive Code Cells',c10,f2,fs7)

# Commented out IPython magic to ensure Python compatibility.
# %%html
# <div id='smcell' style='border:10px double white; 
#      width:700px; height:950px; overflow:auto; 
#      padding:10px; background-color:ghostwhite'>
# <iframe id='if1' 
# src='https://olgabelitskaya.gitlab.io/kaggle/kaggle_smc01.html' 
# width='650' height='900'/></div>